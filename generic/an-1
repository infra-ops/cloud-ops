ssh username@your.remote.host.for.ssh.com 'bash -s' < server-script.sh

%s#/opt/AIC-CLOUDS/#/opt/apps/

https://www.techgig.com/
https://testpot.com/online-test


kubectl get pods | grep Evicted | awk '{print $1}' | xargs kubectl delete pod
kill $(ps aux | grep -i skype | awk '{print $2}')

ps -eo size,pid,user,command --sort -size | \
>     awk '{ hr=$1/1024 ; printf("%13.2f Mb ",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf("%s ",$x) } print "" }' |\
>     cut -d "" -f2 | cut -d "-" -f1


sshpass -p iis123 ssh -o StrictHostKeyChecking=no root@192.168.122.113 'cd /etc/ansible;ansible-playbook ap.yml'

http://ridz1ba.blogspot.in/2014/12/installing-oracle-java-jdk8-on-ubuntu.html

[web]
172.16.89.129 ansible_ssh_user=xxxxx ansible_ssh_pass=xxxxx ansible_sudo_pass=xxxx

ansible -m ping all


ansible -m shell -a 'free -m' host1
ansible all -s -m shell -a 'apt-get install nginx'

ansible all -s -m apt -a 'pkg=nginx state=installed update_cache=true'

cat hello.yml

---
- hosts: web
sudo: true
tasks:
- name: run echo command
command: /bin/echo hello matrix
sudo: true
when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

cat nginx-v.1.0.1.yml 
---

- hosts: web
  tasks:
    - name: Installs nginx web server
      apt: pkg=nginx state=installed update_cache=true
      notify:
        - start nginx

  handlers:
    - name: start nginx
      service: name=nginx state=started

  remote_user: deploy
  become: true
  become_method: sudo

ansible-playbook nginx-v.1.0.1.yml --extra-vars "variable_host=192.168.10.27"
ansible-playbook nginx-v.1.0.1.yml -i /etc/ansible/infra --extra-vars "host=web"




ansible-playbook playbook.yml -i hosts/production --tags="ntp"

ansible-playbook --syntax-check nginx.yml

ansible-role roles/nginx/


ansible-playbook nginx-v.1.0.1.yml -i /etc/ansible/inventory --extra-vars "nodes=web user=deploy"
deploy ALL=(ALL) NOPASSWD: ALL
usermod --shell /bin/bash deploy

curl -sSL https://rvm.io/mpapis.asc | gpg --import -



cat /etc/hosts
52.xx.xx.xx  bastion.example.com


cat .ssh/config 
Host 172.16.*.*
 ProxyCommand ssh -W %h:%p 52.xx.xx.xx
 User deploy
 IdentityFile ~/test-key.pem

Host 52.xx.xx.xx
 Hostname bastion.example.com
 User deploy
 IdentityFile ~/.ssh/id_rsa
 ControlMaster auto
 ControlPath ~/.ssh/ansible-%r@%h:%p
 ControlPersist 5m

  
  


cat aws_inventory-root.yml 
---
[bastion]
jump123 ansible_ssh_host=52.xx.xx.xx ansible_ssh_user=xxxx

[web]
web123  ansible_ssh_host=172.xx.xx.xx   ansible_ssh_user=xxxx












/ec2.py --list --profile default --refresh-cache

docker pull postgres:9.6
docker pull ansible/awx_rabbitmq:3.7.4
docker pull memcached:alpine
docker pull ansible/awx_web:latest
docker pull ansible/awx_task:latest

ansible-playbook -i inventory -e docker_registry_password=password install.yml


ansible-playbook -i inventory/mycluster/hosts.ini cluster.yml

export PATH=~/bin:$PATH 

 git config --global user.name "xxxx"
 git config --global user.email "xxxxxx@gmail.com"
 
 git pull --rebase origin master

git rm -r --cached elk2
git commit -m "changes"
git push origin master

├── site.yml
├── group_vars
│   ├── all.yml
│   ├── dbserver.yml
│   └── webserver.yml
├── host_vars
│   ├── 192.168.1.1.yml
│   └── 192.168.1.2.yml
└── roles
    ├── apaches
    │   └── vars
    │       └── main.yml
    └── mariadb
        └── vars
            └── main.yml
            
            
            apt-add-repository ppa:brightbox/ruby-ng
apt-get update
apt-get install ruby2.5 ruby2.5-dev

openssl passwd -1 > cloud-config-file

users:
 - name: deploy
   passwd:
   groups:
     - sudo
     - docker

sudo coreos-install -d /dev/sda -C stable -c cloud-config-file
vagrant box add ubuntu-14.04 http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-14.04_chef-provisionerless.box
https://www.vagrantbox.es/


vagrant box add ubuntu-16.04  https://github.com/jose-lpa/packer-ubuntu_lts/releases/download/v3.1/ubuntu-16.04.box
vagrant box add generic/ubuntu1804

 vim /etc/apt/sources.list
deb http://mirrors.kernel.org/ubuntu/ xenial main


https://fabianlee.org/2017/04/03/virtualbox-installing-virtualbox-and-vagrant-on-ubuntu-14-0416-04/

sh -c "echo 'deb http://download.virtualbox.org/virtualbox/debian '$(lsb_release -cs)' contrib non-free' > /etc/apt/sources.list.d/virtualbox.list"

wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -
wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox_2016.asc -O- | sudo apt-key add -


apt-get update

apt-get install libpng12-0 libqt4-opengl libqtcore4 libqtgui4 libvpx3 libsdl-ttf2.0-0


apt-get update
apt-cache policy virtualbox-5.1
apt-get install virtualbox-5.1 -y


groups
usermod -a -G vboxusers $USER
exec su -l $USER
groups

apt-get install build-essential linux-headers-`uname -r`
apt-get install dkms -y

vagrant_1.9.3_x86_64.deb
https://releases.hashicorp.com/vagrant/1.9.3/







curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl

git branch
git log
git reset --soft 42134e74ada2ab7760f4de35f91b38c976f146da
git checkout develop
git checkout  -b sc-ss-1209
git commit -m "my changes"
git push origin sc-ss-1209
git remote -v
git pull https://github.com/searchstax/searchstax.git
git push origin sc-ss-1209
git pull origin sc-ss-1209
rake -T
rake serverspec:ac-1
rake spec

vagrant plugin install vagrant-scp
vagrant scp  ec2.py nikaws:/home/vagrant

rm /var/lib/mongodb/mongod.lock
mongod --repair
systemctl restart mongod
mongo --host 192.168.10.65 --port 27017


docker run --name dev-mongo  -p 27017:27017 -v /opt/apps/data:/data/db -d mongo
docker exec -it dev-mongo mongo admin
db.createUser({ user: 'aws-admin', pwd: 'iis123', roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] });

db.awsinstances.insert({ region_id: 'us-east-1', public_ip_address: '54.236.58.33', InstanceId: 'i-0199acc8a7d913cd5' })

git pull origin sc-ss-1209



docker run --name ecs-agent \
--detach=true \
--restart=on-failure:10 \
--volume=/var/run/docker.sock:/var/run/docker.sock \
--volume=/var/log/ecs/:/log \
--volume=/var/lib/ecs/data:/data \
--net=host \
--env=ECS_LOGFILE=/log/ecs-agent.log \
--env=ECS_LOGLEVEL=info \
--env=ECS_DATADIR=/data \
--env=ECS_CLUSTER=connector-clus \
--env=ECS_ENABLE_TASK_IAM_ROLE=true \
--env=ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true \
amazon/amazon-ecs-agent:latest




import re
r = "The rain in Spain"
r = "10.0.2.15 - - [08/Feb/2020:12:01:59 +0000] "GET / HTTP/1.0" 200 116 "-" "ApacheBench/2.3""
r = "10.0.2.15 - - [08/Feb/2020:12:04:39 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.58.0""

chmod 777 /opt/alerts/prometheus/data



yum install -y ecs-init
service docker start
#!/bin/bash
echo "ECS_CLUSTER=connector-clus" >> /etc/ecs/ecs.config


http://es:34094


https://github.com/okfn/infra/tree/master/ansible/inventory
http://people.redhat.com/mskinner/rhug/q2.2017/Ansible-Hands-on-Introduction.pdf
https://www.slideshare.net/johnthethird/ansible-presentation-24942953
https://www.oreilly.com/library/view/ansible-up-and/9781491915318/ch04.html

wget -q -O - archive.kali.org/archive-key.asc | apt-key add


curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose


curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /opt/bin/docker-compose

docker-compose -f node-exporter-cadvisor.yaml up -d


{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS CloudFormation Template OpsWorksVPCELB - Created by Sonny Lugtu",
	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "String",
			"Default": "nik_useast1"
		},
		"VPNAMI": {
			"Description": "AMI Id to be used in creating opsworks instance",
			"Type": "String",
			"Default": "ami-41d69f56"
		},
		"IAMRole": {
			"Description": "IAM role for S3 and CloudFront",
			"Type": "String",
			"Default": "S3CloudFrontAdminRole"
		}
	},

	"Mappings": {
		"SubnetConfig": {
			"VPC": {
				"CIDR": "10.0.0.0/16"
			},
			"Net1": {
				"CIDR": "10.0.1.0/24"
			},
			"Net2": {
				"CIDR": "10.0.2.0/24"
			},
			"Net3": {
				"CIDR": "10.0.3.0/24"
			},
			"Net4": {
				"CIDR": "10.0.4.0/24"
			},
			"Net5": {
				"CIDR": "10.0.5.0/24"
			},
			"Net8": {
				"CIDR": "10.0.8.0/24"
			},
			"Net9": {
				"CIDR": "10.0.9.0/24"
			}
		},
		"AWSInstanceType2Arch": {
			"t1.micro": {
				"Arch": "PV64"
			},
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			}
		},


		"Region2Principal": {
			"us-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"eu-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-south-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"sa-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"cn-north-1": {
				"EC2Principal": "ec2.amazonaws.com.cn",
				"OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
			},
			"eu-central-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			}
		}
	},

	"Resources": {
		"MyS3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": "nik20161007",
				"AccessControl": "PublicRead",
				"WebsiteConfiguration": {
					"IndexDocument": "index.html",
					"ErrorDocument": "error.html"
				}
			}
		},
		"SampleBucketPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "MyS3Bucket"
				},
				"PolicyDocument": {
					"Statement": [{
						"Action": ["s3:GetObject"],
						"Effect": "Allow",
						"Resource": {
							"Fn::Join": ["", ["arn:aws:s3:::", {
								"Ref": "MyS3Bucket"
							}, "/*"]]
						},
						"Principal": "*"
					}]
				}
			}
		},
		"OpsWorksStack": {
			"Type": "AWS::OpsWorks::Stack",
			"Properties": {
				"Name": {
					"Ref": "AWS::StackName"
				},
				"ServiceRoleArn": {
					"Fn::GetAtt": ["OpsWorksServiceRole", "Arn"]
				},
				"DefaultInstanceProfileArn": {
					"Fn::GetAtt": ["OpsWorksInstanceProfile", "Arn"]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"ConfigurationManager": {
					"Name": "Chef",
					"Version": "11.10"
				},
				"DefaultOs": "Ubuntu 14.04 LTS",
				"DefaultSubnetId": {
					"Ref": "PrivateSubnet1"
				}
			}
		},

		"OpsWorksLayer1": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": ["NATEIP", "PublicRoute", "PublicSubnetRouteTableAssociation5", "PrivateRoute", "PrivateSubnetRouteTableAssociation1", "OpsWorksApp"],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "MyWebServer1",
				"Type": "custom",
				"Shortname": "net1node-",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"LoadBasedAutoScaling": {
					"DownScaling": {
						"CpuThreshold": 20,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					},
					"Enable": "true",
					"UpScaling": {
						"CpuThreshold": 90,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					}
				},
				"CustomSecurityGroupIds": [{
					"Ref": "OpsWorksSecurityGroup"
				}]
			}
		},
		"OpsWorksLayer2": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": ["NATEIP", "PublicRoute", "PublicSubnetRouteTableAssociation5", "PrivateRoute", "PrivateSubnetRouteTableAssociation2", "OpsWorksApp"],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "MyWebServer2",
				"Type": "custom",
				"Shortname": "net2node-",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"LoadBasedAutoScaling": {
					"DownScaling": {
						"CpuThreshold": 20,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					},
					"Enable": "true",
					"UpScaling": {
						"CpuThreshold": 90,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					}
				},
				"CustomSecurityGroupIds": [{
					"Ref": "OpsWorksSecurityGroup"
				}]
			}
		},
		"OpsWorksLayer3": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": ["NATEIP", "PublicRoute", "PublicSubnetRouteTableAssociation5", "PrivateRoute", "PrivateSubnetRouteTableAssociation3", "OpsWorksApp"],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "MyWebServer3",
				"Type": "custom",
				"Shortname": "net3node-",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"LoadBasedAutoScaling": {
					"DownScaling": {
						"CpuThreshold": 20,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					},
					"Enable": "true",
					"UpScaling": {
						"CpuThreshold": 90,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					}
				},
				"CustomSecurityGroupIds": [{
					"Ref": "OpsWorksSecurityGroup"
				}]
			}
		},
		"OpsWorksLayer4": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": ["NATEIP", "PublicRoute", "PublicSubnetRouteTableAssociation5", "PrivateRoute", "PrivateSubnetRouteTableAssociation4", "OpsWorksApp"],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "MyWebServer4",
				"Type": "custom",
				"Shortname": "net4node-",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "false",
				"LoadBasedAutoScaling": {
					"DownScaling": {
						"CpuThreshold": 20,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					},
					"Enable": "true",
					"UpScaling": {
						"CpuThreshold": 90,
						"IgnoreMetricsTime": 5,
						"InstanceCount": 1,
						"ThresholdsWaitTime": 10
					}
				},
				"CustomSecurityGroupIds": [{
					"Ref": "OpsWorksSecurityGroup"
				}]
			}
		},
		"OpsWorksLayer5": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": ["PublicRoute", "PublicSubnetRouteTableAssociation5", "OpsWorksApp"],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "MyBastionHost",
				"Type": "custom",
				"Shortname": "net5node-",
				"EnableAutoHealing": "true",
				"AutoAssignElasticIps": "true",
				"AutoAssignPublicIps": "false",
				"CustomSecurityGroupIds": [{
					"Ref": "BastionSecurityGroup"
				}]
			}
		},
		"OpsWorksInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer1"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"RootDeviceType": "ebs"
			}
		},

		"OpsWorksInstance2": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer1"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"RootDeviceType": "ebs"
			}
		},
		"OpsWorksInstance3": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer2"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"RootDeviceType": "ebs"
			}
		},
		"OpsWorksInstance4": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer2"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"RootDeviceType": "ebs"
			}
		},
		"OpsWorksInstance5": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer3"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PrivateSubnet3"
				},
				"RootDeviceType": "ebs"
			}
		},
		"OpsWorksInstance6": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer3"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PrivateSubnet3"
				},
				"RootDeviceType": "ebs"
			}
		},
		"OpsWorksInstance7": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer4"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PrivateSubnet4"
				},
				"RootDeviceType": "ebs"
			}
		},
		"BastionInstance8": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
					"Ref": "OpsWorksLayer5"
				}],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PublicSubnet5"
				},
				"RootDeviceType": "ebs"
			}
		},
		"VPNInstance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PublicSubnet5"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"ImageId": {
					"Ref": "VPNAMI"
				},
				"IamInstanceProfile": {
					"Ref": "IAMRole"
				},
				"SecurityGroupIds": [{
					"Ref": "BastionSecurityGroup"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": "VPNInstance"
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash\n\n",
							"#Create index.html and download keypair\n",
							"aws s3 cp s3://cf-templates-1qurw2yhci5ss-us-east-1/nik_useast1.pem /var/opt/nik_useast1.pem --region us-east-1\n\n",
							"echo Welcome > /var/opt/index.html\n\n",
							"aws s3 cp /var/opt/index.html s3://nik20161007/index.html --region us-east-1\n\n"
						]]
					}
				}
			}
		},

		"OpsWorksApp": {
			"Type": "AWS::OpsWorks::App",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "MyNginx",
				"Type": "static",
				"AppSource": {
					"Type": "git",
					"Url": "git://github.com/nik786/cookbooks.git",
					"Revision": "version1"
				},
				"Attributes": {
					"DocumentRoot": " "
				}
			}
		},

		"OpsWorksServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [{
								"Fn::FindInMap": ["Region2Principal", {
									"Ref": "AWS::Region"
								}, "OpsWorksPrincipal"]
							}]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "opsworks-service",
					"PolicyDocument": {
						"Statement": [{
							"Effect": "Allow",
							"Action": ["ec2:*", "iam:PassRole", "cloudwatch:GetMetricStatistics", "elasticloadbalancing:*", "s3:*"],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"OpsWorksInstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [{
								"Fn::FindInMap": ["Region2Principal", {
									"Ref": "AWS::Region"
								}, "EC2Principal"]
							}]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/"
			}
		},
		"OpsWorksInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "OpsWorksInstanceRole"
				}]
			}
		},
		"OpsWorksSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound requests from the ELB to the OpsWorks instances",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "10.0.0.0/16"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"SourceSecurityGroupId": {
						"Ref": "ELBSecurityGroup"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "8080",
					"ToPort": "8080",
					"SourceSecurityGroupId": {
						"Ref": "ELBSecurityGroup"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"SourceSecurityGroupId": {
						"Ref": "ELBSecurityGroup"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "8050",
					"ToPort": "8050",
					"SourceSecurityGroupId": {
						"Ref": "ELBSecurityGroup"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "90",
					"ToPort": "90",
					"SourceSecurityGroupId": {
						"Ref": "ELBSecurityGroup"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "9020",
					"ToPort": "9020",
					"SourceSecurityGroupId": {
						"Ref": "ELBSecurityGroup"
					}
				}, {
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "10.0.0.0/16"
				}]
			}
		},
		"BastionSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable SSH and HTTP access",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "943",
					"ToPort": "943",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "1194",
					"ToPort": "1194",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "icmp",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": "10.0.0.0/16"
				}]
			}
		},



		"ELB1": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"CrossZone": "true",
				"SecurityGroups": [{
					"Ref": "ELBSecurityGroup"
				}],
				"Subnets": [{
					"Ref": "PublicSubnet5"
				}, {
					"Ref": "PublicSubnet8"
				}, {
					"Ref": "PublicSubnet9"
				}],
				"Listeners": [{
					"LoadBalancerPort": "80",
					"InstancePort": "9020",
					"Protocol": "HTTP"
				}],
				"HealthCheck": {
					"Target": "HTTP:80/",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "5",
					"Interval": "90",
					"Timeout": "60"
				}
			}
		},

		"ELB2": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"CrossZone": "true",
				"SecurityGroups": [{
					"Ref": "ELBSecurityGroup"
				}],
				"Subnets": [{
					"Ref": "PublicSubnet5"
				}],
				"Listeners": [{
					"LoadBalancerPort": "80",
					"InstancePort": "9020",
					"Protocol": "HTTP"
				}],
				"HealthCheck": {
					"Target": "HTTP:80/",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "5",
					"Interval": "90",
					"Timeout": "60"
				}
			}
		},
		"ELB3": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"CrossZone": "true",
				"SecurityGroups": [{
					"Ref": "ELBSecurityGroup"
				}],
				"Subnets": [{
					"Ref": "PublicSubnet5"
				}],
				"Listeners": [{
					"LoadBalancerPort": "80",
					"InstancePort": "9020",
					"Protocol": "HTTP"
				}],
				"HealthCheck": {
					"Target": "HTTP:80/",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "5",
					"Interval": "90",
					"Timeout": "60"
				}
			}
		},


		"ELBAttachment1": {
			"Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
			"Properties": {
				"ElasticLoadBalancerName": {
					"Ref": "ELB1"
				},
				"LayerId": {
					"Ref": "OpsWorksLayer1"
				}
			}
		},
		"ELBAttachment2": {
			"Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
			"Properties": {
				"ElasticLoadBalancerName": {
					"Ref": "ELB2"
				},
				"LayerId": {
					"Ref": "OpsWorksLayer2"
				}
			}
		},
		"ELBAttachment3": {
			"Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
			"Properties": {
				"ElasticLoadBalancerName": {
					"Ref": "ELB3"
				},
				"LayerId": {
					"Ref": "OpsWorksLayer3"
				}
			}
		},
		"ELBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound access to the ELB",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},

		"VPC": {
			"Type": "AWS::EC2::VPC",
			"DependsOn": "OpsWorksServiceRole",
			"Properties": {
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Public"
				}]
			}
		},

		"PublicSubnet5": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": ""
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Net5", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Public"
				}]
			}
		},
		"PublicSubnet8": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": ""
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Net8", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Public"
				}]
			}
		},
		"PublicSubnet9": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["2", {
						"Fn::GetAZs": ""
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Net9", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Public"
				}]
			}
		},
		"NAT": {

			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"NATEIP",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "PublicSubnet5"
				}
			}
		},
		"NATEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "VPC"
			}
		},
		"EC2EIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {
					"Ref": "VPNInstance"
				},
				"Domain": "VPC"
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Public"
				}]
			}
		},

		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},

		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Public"
				}]
			}
		},

		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "VPCGatewayAttachment",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},

		"PublicSubnetRouteTableAssociation5": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet5"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicSubnetRouteTableAssociation8": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet8"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicSubnetRouteTableAssociation9": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet9"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PublicNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Public"
				}]
			}
		},
		"InboundHTTPPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},
		"InboundHTTPSPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "443",
					"To": "443"
				}
			}
		},
		"InboundSSHPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},
		"InboundEphemeralPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "103",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"OutboundPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation5": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet5"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation8": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet8"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation9": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet9"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": ""
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Net1", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Name",
					"Value": "Private"
				}]
			}
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": ""
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Net2", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Name",
					"Value": "Private"
				}]
			}
		},
		"PrivateSubnet3": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": ""
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Net3", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Name",
					"Value": "Private"
				}]
			}
		},
		"PrivateSubnet4": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": ""
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Net4", "CIDR"]
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Name",
					"Value": "Private"
				}]
			}
		},

		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Private"
				}]
			}
		},
		"PrivateSubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateSubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateSubnetRouteTableAssociation3": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet3"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateSubnetRouteTableAssociation4": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet4"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NAT"
				}
			}
		},
		"PrivateNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Network",
					"Value": "Private"
				}]
			}
		},
		"InboundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"OutBoundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PrivateSubnetNetworkAclAssociation1": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"PrivateSubnetNetworkAclAssociation2": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"PrivateSubnetNetworkAclAssociation3": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet3"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"PrivateSubnetNetworkAclAssociation4": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet4"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		}

	},
	"Outputs": {
		"StackId": {
			"Description": "Stack Id of newly created OpsWorks stack",
			"Value": {
				"Ref": "OpsWorksStack"
			}
		},
		"AppId": {
			"Description": "Application Id of newly created OpsWorks application",
			"Value": {
				"Ref": "OpsWorksApp"
			}
		},
		"VPC": {
			"Description": "VPC Id of newly created Virtual Private Cloud",
			"Value": {
				"Ref": "VPC"
			}
		},
		"URL": {
			"Description": "URL for newly created application",
			"Value": {
				"Fn::Join": ["", ["http://", {
					"Fn::GetAtt": ["ELB1", "DNSName"]
				}]]
			}
		}
	}
}

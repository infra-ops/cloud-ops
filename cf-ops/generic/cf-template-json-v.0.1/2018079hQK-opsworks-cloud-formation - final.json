{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS CloudFormation Template OpsWorksVPCELB",
	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"IAMRole": {
			"Description": "IAM role for S3 and CloudFront",
			"Type": "String",
			"Default": "S3CloudFrontAdminRole"
		}
	},
	"Mappings": {
		"SubnetConfig": {
			"VPC": {
				"CIDR": "13.0.0.0/16"
			},
			"Net1": {
				"CIDR": "13.0.1.0/24",
				"AZ": "us-east-1a"
			},
			"Net2": {
				"CIDR": "13.0.2.0/24",
				"AZ": "us-east-1b"
			}
		},
		"AWSInstanceType2Arch": {
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			}
		},
		"Region2Principal": {
			"us-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"us-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"eu-west-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-northeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-southeast-2": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"ap-south-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"sa-east-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			},
			"cn-north-1": {
				"EC2Principal": "ec2.amazonaws.com.cn",
				"OpsWorksPrincipal": "opsworks.amazonaws.com.cn"
			},
			"eu-central-1": {
				"EC2Principal": "ec2.amazonaws.com",
				"OpsWorksPrincipal": "opsworks.amazonaws.com"
			}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"DependsOn": "OpsWorksServiceRole",
			"Properties": {
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"VPC",
						"CIDR"
					]
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Net1",
						"AZ"
					]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Net1",
						"CIDR"
					]
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "VPCGatewayAttachment",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"PublicSubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"PrivateSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Net2",
						"AZ"
					]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Fn::FindInMap": [
						"SubnetConfig",
						"Net2",
						"CIDR"
					]
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"PrivateSubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"PrivateRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NATGateway"
				}
			}
		},
		"PublicNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Public"
					}
				]
			}
		},
		"InboundHTTPPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},
		"InboundHTTPSPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "443",
					"To": "443"
				}
			}
		},
		"InboundSSHPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},
		"InboundEphemeralPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "103",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"OutboundPublicNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PublicSubnetNetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"NetworkAclId": {
					"Ref": "PublicNetworkAcl"
				}
			}
		},
		"PrivateNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}, {
						"Key": "Network",
						"Value": "Private"
					}
				]
			}
		},
		"InboundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"OutBoundPrivateNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"PrivateSubnetNetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"NetworkAclId": {
					"Ref": "PrivateNetworkAcl"
				}
			}
		},
		"OpsWorksSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound requests from the ELB to the OpsWorks instances",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "13.0.0.0/16"
					}, {
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"SourceSecurityGroupId": {
							"Ref": "ELBSecurityGroup"
						}
					}, {
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": "13.0.0.0/16"
					}
				],
				"SecurityGroupEgress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}, {
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"DbSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound requests from the ELB to the OpsWorks instances",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "13.0.0.0/16"
					}, {
						"IpProtocol": "tcp",
						"FromPort": "27017",
						"ToPort": "27017",
						"SourceSecurityGroupId": {
							"Ref": "ELBSecurityGroup"
						}
					}, {
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": "13.0.0.0/16"
					}
				]
			}
		},
		"BastionSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable SSH and HTTP access",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					}, {
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}, {
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": "13.0.0.0/16"
					}
				]
			}
		},
		"ELBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow inbound access to the ELB",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"WebLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Subnets": [{
						"Ref": "PublicSubnet"
					}, {
						"Ref": "PrivateSubnet"
					}
				],
				"LoadBalancerAttributes": [{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "50"
					}
				],
				"SecurityGroups": [{
						"Ref": "ELBSecurityGroup"
					}
				],
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			}
		},
		"WebListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "WebTargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "WebLoadBalancer"
				},
				"Port": "80",
				"Protocol": "HTTP"
			},
			"DependsOn": [
				"WebLoadBalancer"
			]
		},
		"WebTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 30,
				"HealthCheckProtocol": "HTTP",
				"HealthCheckTimeoutSeconds": 10,
				"HealthyThresholdCount": 4,
				"Matcher": {
					"HttpCode": "200"
				},
				"Name": "WebTargets",
				"Port": 10,
				"Protocol": "HTTP",
				"TargetGroupAttributes": [{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "20"
					}
				],
				"TargetType": "ip",
				"Targets": [{
						"Id": {
							"Fn::GetAtt": ["OpsworksEcsInstance1", "PrivateIp"]
						},
						"Port": 80
					}, {
						"Id": {
							"Fn::GetAtt": ["OpsworksEcsInstance4", "PrivateIp"]
						},
						"Port": 80
					}
				],
				"UnhealthyThresholdCount": 3,
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			},
			"DependsOn": [
				"OpsworksEcsInstance1",
				"OpsworksEcsInstance4"
			]
		},
		"AppLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Scheme": "internal",
				"Subnets": [{
						"Ref": "PrivateSubnet"
					}, {
						"Ref": "PublicSubnet"
					}
				],
				"LoadBalancerAttributes": [{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "50"
					}
				],
				"SecurityGroups": [{
						"Ref": "ELBSecurityGroup"
					}
				],
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			}
		},
		"AppListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "AppTargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "AppLoadBalancer"
				},
				"Port": "80",
				"Protocol": "HTTP"
			}
		},
		"AppTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 30,
				"HealthCheckProtocol": "HTTP",
				"HealthCheckTimeoutSeconds": 10,
				"HealthyThresholdCount": 4,
				"Matcher": {
					"HttpCode": "200"
				},
				"Name": "AppTargets",
				"Port": 10,
				"Protocol": "HTTP",
				"TargetGroupAttributes": [{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "20"
					}
				],
				"TargetType": "ip",
				"Targets": [{
						"Id": {
							"Fn::GetAtt": ["OpsworksEcsInstance2", "PrivateIp"]
						},
						"Port": 80
					}, {
						"Id": {
							"Fn::GetAtt": ["OpsworksEcsInstance5", "PrivateIp"]
						},
						"Port": 80
					}
				],
				"UnhealthyThresholdCount": 3,
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]				
			},
			"DependsOn": [
				"OpsworksEcsInstance2",
				"OpsworksEcsInstance5"
			]
		},
		"DbLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Scheme": "internal",
				"Subnets": [{
						"Ref": "PrivateSubnet"
					}, {
						"Ref": "PublicSubnet"
					}
				],
				"LoadBalancerAttributes": [{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "50"
					}
				],
				"SecurityGroups": [{
						"Ref": "ELBSecurityGroup"
					}
				],
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			}
		},
		"DbListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "DbTargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "DbLoadBalancer"
				},
				"Port": "80",
				"Protocol": "HTTP"
			}
		},
		"DbTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 30,
				"HealthCheckProtocol": "HTTP",
				"HealthCheckTimeoutSeconds": 10,
				"HealthyThresholdCount": 4,
				"Matcher": {
					"HttpCode": "200"
				},
				"Name": "DbTargets",
				"Port": 10,
				"Protocol": "HTTP",
				"TargetGroupAttributes": [{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "20"
					}
				],
				"TargetType": "ip",
				"Targets": [{
						"Id": {
							"Fn::GetAtt": ["OpsworksEcsInstance3", "PrivateIp"]
						},
						"Port": 80
					}, {
						"Id": {
							"Fn::GetAtt": ["OpsworksEcsInstance6", "PrivateIp"]
						},
						"Port": 80
					}
				],
				"UnhealthyThresholdCount": 3,
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			},
			"DependsOn": [
				"OpsworksEcsInstance3",
				"OpsworksEcsInstance6"
			]
		},
		"NATGateway": {
			"DependsOn": "VPCGatewayAttachment",
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"EIPAddress",
						"AllocationId"
					]
				},
				"SubnetId": {
					"Ref": "PublicSubnet"
				}
			}
		},
		"EIPAddress": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"BastionInstance": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
						"Ref": "OpsWorksLayer1"
					}
				],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"RootDeviceType": "ebs"
			}
		},
		"OpsWorksStack": {
			"Type": "AWS::OpsWorks::Stack",
			"Properties": {
				"Name": {
					"Ref": "AWS::StackName"
				},
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"OpsWorksServiceRole",
						"Arn"
					]
				},
				"DefaultInstanceProfileArn": {
					"Fn::GetAtt": [
						"OpsWorksInstanceProfile",
						"Arn"
					]
				},
				"ConfigurationManager": {
					"Name": "Chef",
					"Version": "11.10"
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"UseCustomCookbooks": false,
				"HostnameTheme": "Layer_Dependent",
				"DefaultOs": "Amazon Linux 2017.09",
				"Attributes": {
					"Color": "rgb(45, 114, 184)"
				},
				"DefaultSubnetId": {
					"Ref": "PrivateSubnet"
				}
			},
			"DependsOn": [
				"ecsCluster1"
			]
		},
		"OpsWorksStack2": {
			"Type": "AWS::OpsWorks::Stack",
			"Properties": {
				"Name": {
					"Ref": "AWS::StackName"
				},
				"ServiceRoleArn": {
					"Fn::GetAtt": [
						"OpsWorksServiceRole",
						"Arn"
					]
				},
				"DefaultInstanceProfileArn": {
					"Fn::GetAtt": [
						"OpsWorksInstanceProfile",
						"Arn"
					]
				},
				"ConfigurationManager": {
					"Name": "Chef",
					"Version": "11.10"
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"UseCustomCookbooks": false,
				"HostnameTheme": "Layer_Dependent",
				"DefaultOs": "Amazon Linux 2017.09",
				"Attributes": {
					"Color": "rgb(45, 114, 184)"
				},
				"DefaultSubnetId": {
					"Ref": "PrivateSubnet"
				}
			},
			"DependsOn": [
				"ecsCluster2"
			]
		},
		"OpsWorksServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": [{
										"Fn::FindInMap": [
											"Region2Principal", {
												"Ref": "AWS::Region"
											},
											"OpsWorksPrincipal"
										]
									}
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [{
						"PolicyName": "opsworks-service",
						"PolicyDocument": {
							"Statement": [{
									"Effect": "Allow",
									"Action": [
										"ec2:*",
										"iam:PassRole",
										"cloudwatch:GetMetricStatistics",
										"elasticloadbalancing:*",
										"s3:*",
										"ecs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"OpsWorksInstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": [{
										"Fn::FindInMap": [
											"Region2Principal", {
												"Ref": "AWS::Region"
											},
											"EC2Principal"
										]
									}
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}, {
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ecs.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}, {
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [{
						"PolicyName": "allow-s3-ecs",
						"PolicyDocument": {
							"Statement": [{
									"Effect": "Allow",
									"Action": [
										"s3:*",
										"elasticloadbalancing:DeregisterTargets",
										"elasticloadbalancing:RegisterTargets"
									],
									"Resource": [
										"*"
									]
								}, {
									"Effect": "Allow",
									"Action": [
										"ecs:ListClusters"
									],
									"Resource": [
										"*"
									]
								}, {
									"Effect": "Allow",
									"Action": [
										"ecs:DescribeClusters",
										"ecs:RegisterContainerInstance",
										"ecs:RegisterTaskDefinition",
										"ecs:RunTask",
										"ecs:StopTask"
									],
									"Resource": [
										"*"
									]
								}
							]
						}
					}
				]
			}
		},
		"OpsWorksInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
						"Ref": "OpsWorksInstanceRole"
					}
				]
			}
		},
		"ecsCluster1": {
			"Type": "AWS::ECS::Cluster"
		},
		"ecsCluster2": {
			"Type": "AWS::ECS::Cluster"
		},
		"RegisterCluster1": {
			"Type": "AWS::CloudFormation::CustomResource",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": ["OpsworksRegisterCluster", "Arn"]
				},
				"EcsClusterName": {
					"Ref": "ecsCluster1"
				},
				"OpsWorksStackId": {
					"Ref": "OpsWorksStack"
				}
			},
			"DependsOn": [
				"OpsWorksStack"
			]
		},
		"RegisterCluster2": {
			"Type": "AWS::CloudFormation::CustomResource",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": ["OpsworksRegisterCluster", "Arn"]
				},
				"EcsClusterName": {
					"Ref": "ecsCluster2"
				},
				"OpsWorksStackId": {
					"Ref": "OpsWorksStack2"
				}
			},
			"DependsOn": [
				"OpsWorksStack2"
			]
		},
		"OpsworksRegisterCluster": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Handler": "index.lambda_handler",
				"Role": {
					"Fn::GetAtt": [
						"LambdaExecutionRole",
						"Arn"
					]
				},
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import json",
								"import cfnresponse",
								"ecsclient = boto3.client('ecs')",
								"opsworksclient = boto3.client('opsworks',",
								"  region_name='us-east-1',",
								"  endpoint_url='https://opsworks.us-east-1.amazonaws.com')",
								"def lambda_handler(event, context):",
								"  try:",
								"    if (event['RequestType'] == 'Create'):",
								"      ecscluster = ecsclient.describe_clusters(clusters=[",
								"        event['ResourceProperties']['EcsClusterName']])",
								"      response = opsworksclient.register_ecs_cluster(",
								"        EcsClusterArn=ecscluster['clusters'][0]['clusterArn'],",
								"        StackId=event['ResourceProperties']['OpsWorksStackId']",
								"      )",
								"      responseData = {}",
								"      responseData['data'] = response['EcsClusterArn']",
								"      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
								"    else:",
								"      responseData = {}",
								"      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
								"  except Exception as e:",
								"    responseData = {}",
								"    responseData['error'] = e.message",
								"    cfnresponse.send(event, context, cfnresponse.FAILED, responseData, \"CustomResourcePhysicalID\")"
							]
						]
					}
				},
				"Runtime": "python2.7",
				"Timeout": "10"
			}
		},
		"LambdaExecutionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [{
						"PolicyName": "root",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": "arn:aws:logs:*:*:*"
								}, {
									"Effect": "Allow",
									"Action": [
										"opsworks:RegisterEcsCluster"
									],
									"Resource": "arn:aws:opsworks:*:*:*"
								}, {
									"Effect": "Allow",
									"Action": [
										"ecs:DescribeClusters"
									],
									"Resource": "arn:aws:ecs:*:*:*"
								}
							]
						}
					}
				]
			}
		},
		"OpsWorksEcsEc2Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
				  "Version": "2008-10-17",
				  "Statement": [
					{
					  "Effect": "Allow",
					  "Principal": {
						"Service": "ec2.amazonaws.com"
					  },
					  "Action": "sts:AssumeRole"
					}
				  ]
				},
				"Path": "/",
				"Policies": [{
						"PolicyName": "aws-opsworks-ec2-role-with-ecs",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ecs:RegisterContainerInstance",
										"ecs:DeregisterContainerInstance",
										"ecs:DiscoverPollEndpoint",
										"ecs:Submit*",
										"ecs:Poll"
									],
									"Resource": [
										"*"
									]
								}
							]
						}
					}
				]
			}
		},
		"OpsWorksEcsInstanceProfile": {
		   "Type": "AWS::IAM::InstanceProfile",
		   "Properties": {
			  "Path": "/",
			  "Roles": [{
					"Ref": "OpsWorksEcsEc2Role"
				}
			  ],
			  "InstanceProfileName": "ecsInstanceRole"
		   }
		},
		
		"OpsworksEcsLayer1": {
			"Type": "AWS::OpsWorks::Layer",
			"Properties": {
				"Attributes": {
					"EcsClusterArn": {
						"Fn::Join": [
							"",
							[
								"arn:aws:ecs:", {
									"Ref": "AWS::Region"
								},
								":", {
									"Ref": "AWS::AccountId"
								},
								":cluster/", {
									"Ref": "ecsCluster1"
								}
							]
						]
					}
				},
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "true",
				"CustomInstanceProfileArn": {
					"Fn::Join": [
						"",
						[
							"arn:aws:iam::", {
								"Ref": "AWS::AccountId"
							},
							":instance-profile/ecsInstanceRole"
						]
					]
				},
				"EnableAutoHealing": "true",
				"Name": "ECS Cluster 1",
				"Shortname": "web-server",
				"Type": "ecs-cluster",
				"CustomRecipes": {
					"Setup": [
						"nik::setup"
					],
					"Configure": [
						"nik::default"
					]
				},
				"CustomSecurityGroupIds": [{
						"Ref": "OpsWorksSecurityGroup"
					}
				],
				"StackId": {
					"Ref": "OpsWorksStack"
				}
			},
			"DependsOn": [
				"RegisterCluster1",
				"RegisterCluster2",
				"EIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnetRouteTableAssociation",
				"OpsWorksApp",
				"OpsWorksEcsEc2Role"
			]
		},
		"OpsworksEcsLayer2": {
			"Type": "AWS::OpsWorks::Layer",
			"Properties": {
				"Attributes": {
					"EcsClusterArn": {
						"Fn::Join": [
							"",
							[
								"arn:aws:ecs:", {
									"Ref": "AWS::Region"
								},
								":", {
									"Ref": "AWS::AccountId"
								},
								":cluster/", {
									"Ref": "ecsCluster2"
								}
							]
						]
					}
				},
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "true",
				"CustomInstanceProfileArn": {
					"Fn::Join": [
						"",
						[
							"arn:aws:iam::", {
								"Ref": "AWS::AccountId"
							},
							":instance-profile/ecsInstanceRole"
						]
					]
				},
				"EnableAutoHealing": "true",
				"Name": "ECS Cluster 2",
				"Shortname": "app-server",
				"Type": "ecs-cluster",
				"CustomRecipes": {
					"Setup": [
						"nik::setup"
					],
					"Configure": [
						"nik::default"
					]
				},
				"CustomSecurityGroupIds": [{
						"Ref": "OpsWorksSecurityGroup"
					}
				],
				"StackId": {
					"Ref": "OpsWorksStack2"
				}
			},
			"DependsOn": [
				"RegisterCluster1",
				"RegisterCluster2",
				"EIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnetRouteTableAssociation",
				"OpsWorksApp"
			]
		},
		"OpsWorksLayer1": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": [
				"RegisterCluster1",
				"RegisterCluster2",
				"EIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnetRouteTableAssociation",
				"OpsWorksApp"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "JumpServer",
				"Type": "custom",
				"Shortname": "jumpserver",
				"EnableAutoHealing": "false",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "true",
				"CustomRecipes": {
					"Setup": [
						"nik::setup"
					],
					"Configure": [
						"nik::default"
					]
				},
				"CustomSecurityGroupIds": [{
						"Ref": "BastionSecurityGroup"
					}
				]
			}
		},
		"OpsWorksLayer3": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": [
				"RegisterCluster1",
				"RegisterCluster2",
				"EIPAddress",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"PrivateRoute",
				"PrivateSubnetRouteTableAssociation",
				"OpsWorksApp"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "DBServer",
				"Type": "custom",
				"Shortname": "dbserver",
				"EnableAutoHealing": "false",
				"AutoAssignElasticIps": "false",
				"AutoAssignPublicIps": "true",
				"CustomRecipes": {
					"Setup": [
						"nik::setup"
					],
					"Configure": [
						"nik::default"
					]
				},
				"CustomSecurityGroupIds": [{
						"Ref": "DbSecurityGroup"
					}
				]
			}
		},
		"OpsWorksLayer2": {
			"Type": "AWS::OpsWorks::Layer",
			"DependsOn": [
				"RegisterCluster1",
				"RegisterCluster2",
				"PublicRoute",
				"PublicSubnetRouteTableAssociation",
				"OpsWorksApp"
			],
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "Nginx",
				"Type": "custom",
				"Shortname": "nginx",
				"EnableAutoHealing": "false",
				"AutoAssignElasticIps": "true",
				"AutoAssignPublicIps": "false",
				"CustomRecipes": {
					"Setup": [
						"nik::setup"
					],
					"Configure": [
						"nik::default"
					]
				},
				"CustomSecurityGroupIds": [{
						"Ref": "BastionSecurityGroup"
					}
				]
			}
		},

		"OpsWorksInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
						"Ref": "OpsWorksLayer1"
					}
				],
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"Architecture": "x86_64",
				"InstallUpdatesOnBoot": "true",
				"InstanceType": "t2.micro",
				"Os": "Amazon Linux 2017.09",
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"RootDeviceType": "ebs"
			},
			"DependsOn": [
				"OpsWorksLayer1"
			]
		},
		"OpsworksEcsInstance1": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"Architecture": "x86_64",
				"InstallUpdatesOnBoot": "true",
				"InstanceType": "t2.micro",
				"Os": "Amazon Linux 2017.09",
				"RootDeviceType": "ebs",
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
						"Ref": "OpsworksEcsLayer1"
					}
				]
			},
			"DependsOn": [
				"OpsWorksLayer1"
			]
		},
		"OpsworksEcsInstance2": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"Architecture": "x86_64",
				"InstallUpdatesOnBoot": "true",
				"InstanceType": "t2.micro",
				"Os": "Amazon Linux 2017.09",
				"RootDeviceType": "ebs",
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"StackId": {
					"Ref": "OpsWorksStack2"
				},
				"LayerIds": [{
						"Ref": "OpsworksEcsLayer2"
					}
				]
			},
			"DependsOn": [
				"OpsWorksLayer2"
			]
		},
		"OpsworksEcsInstance3": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"Architecture": "x86_64",
				"InstallUpdatesOnBoot": "true",
				"InstanceType": "t2.micro",
				"Os": "Amazon Linux 2017.09",
				"RootDeviceType": "ebs",
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"StackId": {
					"Ref": "OpsWorksStack2"
				},
				"LayerIds": [{
						"Ref": "OpsworksEcsLayer2"
					}
				]
			},
			"DependsOn": [
				"OpsWorksLayer2"
			]
		},
		"OpsworksEcsInstance4": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"Architecture": "x86_64",
				"InstallUpdatesOnBoot": "true",
				"InstanceType": "t2.micro",
				"Os": "Amazon Linux 2017.09",
				"RootDeviceType": "ebs",
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"LayerIds": [{
						"Ref": "OpsworksEcsLayer1"
					}
				]
			},
			"DependsOn": [
				"OpsWorksLayer1"
			]
		},
		"OpsworksEcsInstance5": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"Architecture": "x86_64",
				"InstallUpdatesOnBoot": "true",
				"InstanceType": "t2.micro",
				"Os": "Amazon Linux 2017.09",
				"RootDeviceType": "ebs",
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"StackId": {
					"Ref": "OpsWorksStack2"
				},
				"LayerIds": [{
						"Ref": "OpsworksEcsLayer2"
					}
				]
			},
			"DependsOn": [
				"OpsWorksLayer2"
			]
		},
		"OpsworksEcsInstance6": {
			"Type": "AWS::OpsWorks::Instance",
			"Properties": {
				"Architecture": "x86_64",
				"InstallUpdatesOnBoot": "true",
				"InstanceType": "t2.micro",
				"Os": "Amazon Linux 2017.09",
				"RootDeviceType": "ebs",
				"SshKeyName": {
					"Ref": "KeyName"
				},
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"StackId": {
					"Ref": "OpsWorksStack2"
				},
				"LayerIds": [{
						"Ref": "OpsworksEcsLayer2"
					}
				]
			},
			"DependsOn": [
				"OpsWorksLayer2"
			]
		},
		"OpsWorksApp": {
			"Type": "AWS::OpsWorks::App",
			"Properties": {
				"StackId": {
					"Ref": "OpsWorksStack"
				},
				"Name": "MyNginx",
				"Type": "static",
				"AppSource": {
					"Type": "git",
					"Url": "git://github.com/nik7864/stack-5.git",
					"Revision": "master"
				},
				"Attributes": {
					"DocumentRoot": " "
				}
			}
		},
		"MyS3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"AccessControl": "PublicRead",
				"WebsiteConfiguration": {
					"IndexDocument": "index.html",
					"ErrorDocument": "error.html"
				}
			}
		},
		"SampleBucketPolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "MyS3Bucket"
				},
				"PolicyDocument": {
					"Statement": [{
							"Action": [
								"s3:GetObject"
							],
							"Effect": "Allow",
							"Resource": {
								"Fn::Join": [
									"",
									[
										"arn:aws:s3:::", {
											"Ref": "MyS3Bucket"
										},
										"/*"
									]
								]
							},
							"Principal": "*"
						}
					]
				}
			}
		}
	},
	"Outputs": {
		"StackId": {
			"Description": "Stack Id of newly created OpsWorks stack",
			"Value": {
				"Ref": "OpsWorksStack"
			}
		},
		"AppId": {
			"Description": "Application Id of newly created OpsWorks application",
			"Value": {
				"Ref": "OpsWorksApp"
			}
		},
		"VPC": {
			"Description": "VPC Id of newly created Virtual Private Cloud",
			"Value": {
				"Ref": "VPC"
			}
		}
	}
}
ssh username@your.remote.host.for.ssh.com 'bash -s' < server-script.sh

%s#/opt/AIC-CLOUDS/#/opt/apps/

https://www.techgig.com/
https://testpot.com/online-test


kubectl get pods | grep Evicted | awk '{print $1}' | xargs kubectl delete pod
kill $(ps aux | grep -i skype | awk '{print $2}')


variable "gce_ssh_pub_key_file" {
  default = "/opt/gcp-tera-ansible/google_cloud_bastion.pub"

}


 metadata {
    hostname = "${lookup(var.hostname, "host${count.index}")}"
    sshKeys = "${var.gce_ssh_user}:${file(var.gce_ssh_pub_key_file)}"
  }


nex = "%s&started_gt=%sT11:13:31.189777Z&started_lt=%sT11:13:31.189777Z"%(str(data["next"]),sg,sl)





ps -eo size,pid,user,command --sort -size | \
>     awk '{ hr=$1/1024 ; printf("%13.2f Mb ",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf("%s ",$x) } print "" }' |\
>     cut -d "" -f2 | cut -d "-" -f1


sshpass -p iis123 ssh -o StrictHostKeyChecking=no root@192.168.122.113 'cd /etc/ansible;ansible-playbook ap.yml'

http://ridz1ba.blogspot.in/2014/12/installing-oracle-java-jdk8-on-ubuntu.html

[web]
172.16.89.129 ansible_ssh_user=xxxxx ansible_ssh_pass=xxxxx ansible_sudo_pass=xxxx

ansible -m ping all


ansible -m shell -a 'free -m' host1
ansible all -s -m shell -a 'apt-get install nginx'

ansible all -s -m apt -a 'pkg=nginx state=installed update_cache=true'

cat hello.yml

---
- hosts: web
sudo: true
tasks:
- name: run echo command
command: /bin/echo hello matrix
sudo: true
when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

cat nginx-v.1.0.1.yml 
---

- hosts: web
  tasks:
    - name: Installs nginx web server
      apt: pkg=nginx state=installed update_cache=true
      notify:
        - start nginx

  handlers:
    - name: start nginx
      service: name=nginx state=started

  remote_user: deploy
  become: true
  become_method: sudo

ansible-playbook nginx-v.1.0.1.yml --extra-vars "variable_host=192.168.10.27"
ansible-playbook nginx-v.1.0.1.yml -i /etc/ansible/infra --extra-vars "host=web"




ansible-playbook playbook.yml -i hosts/production --tags="ntp"

ansible-playbook --syntax-check nginx.yml

ansible-role roles/nginx/


ansible-playbook nginx-v.1.0.1.yml -i /etc/ansible/inventory --extra-vars "nodes=web user=deploy"
deploy ALL=(ALL) NOPASSWD: ALL
usermod --shell /bin/bash deploy

curl -sSL https://rvm.io/mpapis.asc | gpg --import -



cat /etc/hosts
52.xx.xx.xx  bastion.example.com


cat .ssh/config 
Host 172.16.*.*
 ProxyCommand ssh -W %h:%p 52.xx.xx.xx
 User deploy
 IdentityFile ~/test-key.pem

Host 52.xx.xx.xx
 Hostname bastion.example.com
 User deploy
 IdentityFile ~/.ssh/id_rsa
 ControlMaster auto
 ControlPath ~/.ssh/ansible-%r@%h:%p
 ControlPersist 5m

  
  


cat aws_inventory-root.yml 
---
[bastion]
jump123 ansible_ssh_host=52.xx.xx.xx ansible_ssh_user=xxxx

[web]
web123  ansible_ssh_host=172.xx.xx.xx   ansible_ssh_user=xxxx





https://stackoverflow.com/questions/25505146/how-to-copy-files-between-two-nodes-using-ansible






/ec2.py --list --profile default --refresh-cache

docker pull postgres:9.6
docker pull ansible/awx_rabbitmq:3.7.4
docker pull memcached:alpine
docker pull ansible/awx_web:latest
docker pull ansible/awx_task:latest

ansible-playbook -i inventory -e docker_registry_password=password install.yml


ansible-playbook -i inventory/mycluster/hosts.ini cluster.yml

export PATH=~/bin:$PATH 

 git config --global user.name "xxxx"
 git config --global user.email "xxxxxx@gmail.com"
 
 git pull --rebase origin master

git rm -r --cached elk2
git commit -m "changes"
git push origin master

├── site.yml
├── group_vars
│   ├── all.yml
│   ├── dbserver.yml
│   └── webserver.yml
├── host_vars
│   ├── 192.168.1.1.yml
│   └── 192.168.1.2.yml
└── roles
    ├── apaches
    │   └── vars
    │       └── main.yml
    └── mariadb
        └── vars
            └── main.yml
            
            
            apt-add-repository ppa:brightbox/ruby-ng
apt-get update
apt-get install ruby2.5 ruby2.5-dev

openssl passwd -1 > cloud-config-file

users:
 - name: deploy
   passwd:
   groups:
     - sudo
     - docker

sudo coreos-install -d /dev/sda -C stable -c cloud-config-file
vagrant box add ubuntu-14.04 http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-14.04_chef-provisionerless.box
https://www.vagrantbox.es/


vagrant box add ubuntu-16.04  https://github.com/jose-lpa/packer-ubuntu_lts/releases/download/v3.1/ubuntu-16.04.box
vagrant box add generic/ubuntu1804

 vim /etc/apt/sources.list
deb http://mirrors.kernel.org/ubuntu/ xenial main


https://fabianlee.org/2017/04/03/virtualbox-installing-virtualbox-and-vagrant-on-ubuntu-14-0416-04/

sh -c "echo 'deb http://download.virtualbox.org/virtualbox/debian '$(lsb_release -cs)' contrib non-free' > /etc/apt/sources.list.d/virtualbox.list"

wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -
wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox_2016.asc -O- | sudo apt-key add -


apt-get update

apt-get install libpng12-0 libqt4-opengl libqtcore4 libqtgui4 libvpx3 libsdl-ttf2.0-0


apt-get update
apt-cache policy virtualbox-5.1
apt-get install virtualbox-5.1 -y


groups
usermod -a -G vboxusers $USER
exec su -l $USER
groups

apt-get install build-essential linux-headers-`uname -r`
apt-get install dkms -y

vagrant_1.9.3_x86_64.deb
https://releases.hashicorp.com/vagrant/1.9.3/







curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl

git branch
git log
git reset --soft 42134e74ada2ab7760f4de35f91b38c976f146da
git checkout develop
git checkout  -b sc-ss-1209
git commit -m "my changes"
git push origin sc-ss-1209
git remote -v
git pull https://github.com/searchstax/searchstax.git
git push origin sc-ss-1209
git pull origin sc-ss-1209
rake -T
rake serverspec:ac-1
rake spec

vagrant plugin install vagrant-scp
vagrant scp  ec2.py nikaws:/home/vagrant

rm /var/lib/mongodb/mongod.lock
mongod --repair
systemctl restart mongod
mongo --host 192.168.10.65 --port 27017



optional
docker run -d --name dev-mongo  -p 27017:27017 -v /opt/apps/mongo-data:/data/db \
    -e MONGO_INITDB_ROOT_USERNAME=mdmin \
    -e MONGO_INITDB_ROOT_PASSWORD=mpass \
    mongo


cat mongo-start.sh 
docker run --name dev-mongo  -p 27017:27017 -v /opt/apps/data:/data/db -d mongo

cat mongo-login.sh
docker exec -it dev-mongo mongo admin



db.createUser({ user: 'aws-admin', pwd: 'iis123', roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] });
db.createUser({ user: 'u1', pwd: 'iis123', roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] });

use inv
db.createUser({ user: "u3", pwd: "iis123", roles: [ { role: "readWrite", db: "inv" } ]});




db.awsinstances.insert({ region_id: 'us-east-1', public_ip_address: '54.236.58.33', InstanceId: 'i-0199acc8a7d913cd5' })

mongo-cli-login.sh

mongoimport -h 127.0.0.1  --port 27017 --db inventory --collection nodes -u wadmin -p iis123 --type json --file  sample.json


mongo 172.17.0.2:27017/inv -u u3 -p iis123








use inventory
db.createCollection("nodes")
show collections
db.nodes.find().pretty()

db.nodes.insert({ region_id: 'us-east-1', public_ip_address: '54.236.58.33', InstanceId: 'i-0199acc8a7d913cd5' })

mongoimport -h 172.17.0.2  --port 27017 --db inv --collection nodes -u u3 -p iis123 --type json --file  inv.json

cat inv5.json 

[{ "type": "ho", "number": "212-555-1234" }, 
 { "type": "cel", "number": "646-555-4567" }, 
 { "type": "of", "number": "202-555-0182"}]
 
 [{ "flatno": "aa4", "ownername": "user1" }, 
 { "flatno":  "ae1", "ownername": "user2" }, 
 { "flatno":  "bb3", "ownername": "user3"}]



db.nodes.drop()





mongoimport -h 172.17.0.2  --port 27017 --db inv --collection nodes -u u3 -p iis123 --type json --file  inv5.json






git pull origin sc-ss-1209


docker run --name dev-jen  -p 8080:8080 -d jenkins



docker run --name ecs-agent \
--detach=true \
--restart=on-failure:10 \
--volume=/var/run/docker.sock:/var/run/docker.sock \
--volume=/var/log/ecs/:/log \
--volume=/var/lib/ecs/data:/data \
--net=host \
--env=ECS_LOGFILE=/log/ecs-agent.log \
--env=ECS_LOGLEVEL=info \
--env=ECS_DATADIR=/data \
--env=ECS_CLUSTER=connector-clus \
--env=ECS_ENABLE_TASK_IAM_ROLE=true \
--env=ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true \
amazon/amazon-ecs-agent:latest




import re
r = "The rain in Spain"
r = "10.0.2.15 - - [08/Feb/2020:12:01:59 +0000] "GET / HTTP/1.0" 200 116 "-" "ApacheBench/2.3""
r = "10.0.2.15 - - [08/Feb/2020:12:04:39 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.58.0""

chmod 777 /opt/alerts/prometheus/data



yum install -y ecs-init
service docker start
#!/bin/bash
echo "ECS_CLUSTER=connector-clus" >> /etc/ecs/ecs.config


http://es:34094


https://github.com/okfn/infra/tree/master/ansible/inventory
http://people.redhat.com/mskinner/rhug/q2.2017/Ansible-Hands-on-Introduction.pdf
https://www.slideshare.net/johnthethird/ansible-presentation-24942953
https://www.oreilly.com/library/view/ansible-up-and/9781491915318/ch04.html

wget -q -O - archive.kali.org/archive-key.asc | apt-key add


curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose


curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /opt/bin/docker-compose

docker-compose -f node-exporter-cadvisor.yaml up -d

[mail]


apt-get install postfix mailutils libsasl2-modules


https://support.google.com/accounts/answer/6010255


cat /etc/postfix/main.cf

relayhost = [smtp.gmail.com]:587
smtp_use_tls = yes
smtp_tls_security_level = encrypt
smtp_sasl_auth_enable = yes
smtp_sasl_security_options = noanonymous
smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt

cat /etc/postfix/sasl_passwd
[smtp.gmail.com]:587    sudiptaxxxx@gxxx.com:xxxxx

postmap /etc/postfix/sasl_passwd

systemctl restart postfix

echo "This is the body of the email" | mail -s "This is the subject line" sudipta1436@gmail.com


docker pull frodenas/postgresql

docker run -d \
    --name postgresql \
    -p 5432:5432 \
    -e POSTGRES_USERNAME=nik \
    -e POSTGRES_PASSWORD=post7864 \
    frodenas/postgresql


postgres

root@controller:/etc/ansible/key-generation# docker exec -it 092f02fdff14 /bin/bash
root@092f02fdff14:~# postgres

root@092f02fdff14:~# su postgres

postgres@092f02fdff14:/root$ cd
postgres@092f02fdff14:~$ psql
psql (9.6.2)
Type "help" for help.



CREATE DATABASE LIBRARY;
\l
\c library ;


CREATE TABLE RACK1
( 
  book_id integer NOT NULL,
  book_type varchar(20),
  book_name varchar(20),
  author_name varchar(20),
  price integer NOT NULL
);


CREATE TABLE RACK2
( 
  book_id integer NOT NULL,
  book_type varchar(20),
  book_name varchar(20),
  author_name varchar(20),
  price integer NOT NULL
);

\d ;

DROP TABLE table_name;

INSERT INTO RACK1 (book_id,book_type,book_name,author_name,price) VALUES (1, 'mystery', 'diamond', 'Arthur Doyel', 200 );
INSERT INTO RACK1 (book_id,book_type,book_name,author_name,price) VALUES (2, 'mystery', 'hound', 'Arthur Doyel', 300 );

UPDATE RACK1 SET book_name = diamond WHERE col1 = dataA2;

\q;




drop database Library;

PGPASSWORD=post7864 psql -h 172.17.0.2 -p 5432 -d library -U nik


GRANT ALL PRIVILEGES ON DATABASE "library" to nik ;

sudo apt-get install postgresql-client

cat inv.yml 
[dev]
os ansible_ssh_host=xxxx ansible_ssh_user=xxxx  ansible_ssh_pass=xxx

ansible -i inv.yml -m setup os

cat helo.yml 
- hosts: dev
  gather_facts: true
  vars:
    action_type: "hi"
    
  tasks:
     - name: print hello
       shell: echo "hi" 
       register: helo
     - name: out
       debug:
         msg: "{{ helo.stdout }}"      
     - debug: var=ansible_all_ipv4_addresses
     - debug: var=ansible_default_ipv4.address


ansible -i inv.yml -m setup os | grep -i ansible_hostname

<html>
<center>
   <h1> The hostname of this webserver is {{ ansible_hostname }}</h1>
   <h3> It is running on {{ ansible_os_family}}system </h3>
</center>
</html>


cat db-automate/tasks/main.yml 
---

- include_tasks: db.yml
  when: ansible_hostname == 'anode2'  



cat helo.yml 
- hosts: dev
  gather_facts: true
  vars:
    action_type: "hi"
    
  tasks:
     - name: print hello
       shell: echo "hi" 
       register: helo
     - name: out
       debug:
         msg: "{{ helo.stdout }}"      
     - debug: var=ansible_all_ipv4_addresses
     - debug: var=ansible_default_ipv4.address
     - debug: var=ansible_hostname
     - debug: var=ansible_enp0s8.ipv4.address 
     - debug: var=ansible_eth0.ipv4.address  



- hosts: loc
  tasks:
  - stat:
      path: sample_directory
    register: result

  - debug:
      msg: "Ansible when directory exists example"
    when: result.stat.exists == true and result.stat.isdir == true
    
    
    https://www.mydailytutorials.com/working-ansible-conditionals-using-clause/



ansible_ssh_common_args: "-o ProxyCommand=\"sshpass -p '{{gw_password}}' ssh -W %h:%p -t -q deploy@xxxxxx\""
#ansible_ssh_common_args: '-o ProxyCommand="ssh -i /root/.ssh/id_rsa_10.0.5.32 -o StrictHostKeyChecking=no -W %h:%p -t -q  deploy@xxxxxxx"'

inv.yml 
[dev]
10.0.1.195

[uat]
10.0.5.94


helo.yml 
---
- hosts: dev
  

  tasks:
      - name: print hello
        shell: echo "hello world" 
        register: helo
      - name: Print helo
        debug:
          msg: "helo output: {{ helo.stdout }}"

ansible -m ping web-servers
ansible -m ping all

virtualenv ansible2.1
source ansible2.1/bin/activate
pip install ansible==2.1
pip install redis


pip uninstall redis












apt-get update && apt-get install python3-netaddr python-netaddr libyaml-dev python-dev-is-python2 python3-pip -y 
apt-get install wget curl net-tools telnet nmap  aufs-tools apt-transport-https software-properties-common openssl unzip ipvsadm python-httplib2 -y
apt-get install curl gnupg-agent ca-certificates docker.io python3-distutils apt-transport-https -y

apt install software-properties-common -y
apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev -y
apt-get install libsqlite3-dev libreadline-dev libffi-dev wget libbz2-dev -y

apt-get install python-apt -y

apt install software-properties-common -y
add-apt-repository ppa:deadsnakes/ppa
apt-get update
apt install python3.7 -y


update-alternatives --install /usr/bin/python python /usr/bin/python3 10

pip install ruamel.yaml
pip install -r kubespray/requirements.txt
pip install netaddr
pip install docker-py ruamel.yaml
apt-get install docker.io -y
swapoff -a
apt install python3-pip

apt-get install sshpass




yum install gcc openssl-devel bzip2-devel libffi-devel -y
Yum install python3 -y

https://www.gungorbudak.com/blog/2018/08/02/correct-installation-and-configuration-of-pip2-and-pip3/

wget https://bootstrap.pypa.io/get-pip.py

python2 get-pip.py

python3 get-pip.py

root@kcluster:/opt/playbook# pip2 --version
pip 20.0.2 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7)
root@kcluster:/opt/playbook# pip3 --version
pip 20.0.2 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5)


pip install ansible==2.9.6
pip install awscli

python3 -m pip uninstall pip setuptools wheel
sudo apt-get --reinstall install  python3-setuptools python3-wheel python3-pip

python -m pip uninstall pip setuptools wheel
sudo apt-get --reinstall install python-setuptools python-wheel python-pip



curator show indices --all-indices
pip install elasticsearch-curator
curator --host 127.0.0.1 delete indices --older-than 30 --time-unit days --timestring '%Y.%m.%d'
curator --host <ip address> delete indices --time-unit days --older-than 60 --timestring '%Y%m%d'

curl -GET http://localhost:9200/_cat/indices
curl -XDELETE http://localhost:9200/logstash-2016.12.10
curl -XDELETE http://localhost:9200/_all


curl -O https://github.com/kubernetes/helm/archive/v2.7.2.tar.gz


curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh

https://github.com/helm/helm/releases?after=v2.7.2
https://github.com/helm/helm/releases?after=v.3.4.0

wget https://github.com/kubernetes/helm/releases/download/v3.4.0/helm-v3.4.0-linux-amd64.tar.gz



apt install 


https://github.com/vshn/ansible-dynamic-inventory-ec2
https://aws.amazon.com/blogs/apn/getting-started-with-ansible-and-dynamic-amazon-ec2-inventory-management/


docker login

docker build -t nik786/kib-lg -f logtrail-kibana-v.0.1 .

docker run --name kb-2 -d  nik786/kib-lg 

docker exec -it kb-2 /bin/bash

docker push nik786/kib-lg

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout privateKey.key -out certificate.crt
openssl rsa -in privateKey.key -text > key.pem
openssl x509 -inform PEM -in certificate.crt > cert.pem


[tower]

curl -f -k -H 'Content-Type: application/json' -XPOST \
    --user admin:awxsecret \
    http://192.168.42.100/api/v2/job_templates/1/launch/


curl -f -k -H 'Content-Type: application/json' -XPOST \
    -d '{"extra_vars": "{\"foo\": \"bar\"}"}' \
    --user admin:awxsecret http://192.168.42.100/api/v2/job_templates/1/launch/
    
    

curl \ -D- \ -u charlie:charlie \ -X POST \ --data {see below} \ -H "Content-Type: application/json" 
\ http://localhost:8080/rest/api/2/issue/



[tower-rest]

docs: https://docs.ansible.com/ansible-tower/latest/html/towerapi/api_ref.html	
				
				
FUNCTION: TOKEN	METHOD: GET	HEADER: Content-Type: application/json	URL: http://localhost/api/v2/users/1/tokens/	
FUNCTION: PROJECTS	METHOD: GET	HEADER: Content-Type: application/json	URL: http://localhost/api/v2/projects/?search=RBWM1_DIGITAL1_dev-proj-1	
FUNCTION: MANUAL JOB	METHOD:GET	HEADER: Content-Type:  application/json	URL: http://localhost/api/v2/jobs/?job_type=run&launch_type=manual&page=1&started__gt=2019-03-20T00:00&started__lt=2019-03-26T00:00&page_size=100	
FUNCTION: MANUAL JOB	METHOD:GET	HEADER: Content-Type:  application/json	URL: http://localhost/api/v2/jobs/?job_type=run&launch_type=manual&page=1&page_size=100	
FUNCTION: SPECIFIC USER METHOD: GET	HEADER: Content-Type:  application/json	URL: http://localhost/api/v2/users/?username=admin	
FUNCTION: USERS	METHOD: GET	HEADER: Content-Type:  application/json	URL: http://localhost/api/v2/users/	
FUNCTION: PROJECTS	METHOD: GET	HEADER: Content-Type:  application/json	URL: http://localhost/api/v2/users/4/projects/	
FUNCTION: HOSTS	METHOD: GET	HEADER: Content-Type:  application/json	URL: http://localhost/api/v2/hosts?page=1&page_size=100	
FUNCTION: SUCCESSFULL JOBS	METHOD: GET	HEADER: Content-Type:  application/json URL:http://localhost/api/v2/jobs?status=successful&page=1&page_size=100	
FUNCTION: CREDENTIALS	METHOD: GET	HEADER: Content-Type:  application/json	URL:http://localhost/api/v2/credentials/2/	
FUNCTION: PERSONAL_TOKENS	METHOD:GET	HEADER: Content-Type:  application/json	URL: http://localhost/api/v2/users/personal_tokens/?id=1	
FUNCTION: ACCESS LIST	METHOD:GET	HEADER:Content-Type:  application/json	URL: http://localhost/api/v2/projects/%s/access_list/?search=%s	
FUNCTION: ROLES	METHOD: GET	HEADER:Content-Type:  application/json URL: http://localhost/api/v2/roles/%s/users/	
FUNCTION: JOB EXECUTION	METHOD:POST	HEADER:Content-Type:  application/json	URL: http://192.168.0.105/api/v2/job_templates/10/launch/	







Input data

{ "fields": { "project": { "key": "TEST" }, "summary": "REST ye merry gentlemen.", "description":
"Creating of an issue using project keys and issue 
type names using the REST API", "issuetype": { "name": "Bug" } } }

[vs studio]
JSON Tools
Tools for manipulate JSON. You can pretty/minify JSON with this extension.

Features


Alt+M for JSON minify.


ctrl+shift+I - Prettify

Eric Lynd

http://192.168.56.159:8080/pipeline-syntax/


docker pull jenkins:2.60.3
docker pull zlid/jenkins-sudo
kubectl create deployment jen-1 --image=zlid/jenkins-sudo
kubectl create deployment jen-2 --image=jenkins:2.60.3

kubectl -n np create deployment nginx --image=nginx
kubectl create deployment nginx --image=nginx
kubectl scale deployment nginx --replicas=1 -n np
kubectl expose deployment nginx --type=NodePort --port 80 --target-port 80 -n np

kubectl expose deployment simple-webapp-deployment --name=webapp-service --port=8080 --target-port=8080 --type=NodePort --selector=name=simple-webapp --overrides '{ "apiVersion": "v1","spec":{"ports":[{"port": 8080,"protocol":"TCP","targetPort": 8080,"nodePort": 30380}]}}'

kubectl create service nodeport webapp-service  --node-port=31000 --tcp=80:80





cron:

0 22 * * 7

At 10:00 PM, only on Sunday

00 22 7-14,21-28 * 5

At 10:00 PM, on day 7 through 14 and 21 through 28 of the month, and on Friday



vagrant plugin install vagrant-scp
vagrant plugin uninstall vagrant-disksize

cm27.vm.box = "ubuntu/bionic64"
config.vm.box = "bento/ubuntu-20.04"
config.vm.box = "ubuntu/focal64"



---
[python3.7 installation on ubuntu]

rm /var/cache/apt/*.bin 
apt-get update 
apt-get upgrade

apt-get --reinstall install python3-minimal 

python3 -m pip uninstall pip setuptools wheel
apt-get --reinstall install  python3-setuptools python3-wheel python3-pip

python -m pip uninstall pip setuptools wheel
apt-get --reinstall install python-setuptools python-wheel python-pip


update-alternatives --install /usr/bin/python python /usr/bin/python3 10
update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2
update-alternatives --config python 3.7
apt-get install  python3-setuptools python3-wheel python3-pip

update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 5


[eks]

[MANUAL]


1. Create the IAM ROLE FOR EKS Cluster - Successful
2. Create the IAM Role for Worker Node Group - Successful
3. Create the EKS cluster - Successful
4. Create Worker Node  - Successful
5. Creation of Alb Ingress Controller - Successful
6. Integration of Ingress resource(CluterIP) with Alb Ingress Controller and Existing Alb - Successful
7. Deploy Nginx ingress controller By Helm with NodePort - Successful
8. Integration of Ingress resource(ClusterIP) with Nginx Ingress and Existing Alb - Successful
9. Integration of ALB Ingress Controller and Nginx Ingress with exiting ALB
10.Testing the combination of Alb Ingress Controller and Nginx Ingress 





aws eks --region us-east-1 describe-cluster --name eks-v01 --query cluster.status
aws eks update-kubeconfig --region us-east-1 --name eks-v01
aws eks update-kubeconfig --name eksv5  --region us-east-1 --role-arn arn:aws:iam::781467255659:role/EKS_ROLE


kubectl get svc

aws iam list-users

kubectl version --short --client 

EKS WORKERR NODE ROLE 
------------------------
AmazonEKSWorkerNodePolicy

AmazonEKS_CNI_Policy

AmazonEC2ContainerRegistryReadOnly



[NGINX INGRESS WITH HELM]

https://platform9.com/learn/v1.0/tutorials/nginix-controller-helm

helm repo add nginx-stable https://helm.nginx.com/stable
helm repo update

helm install nginx-ingress nginx-stable/nginx-ingress --set rbac.create=true

kubectl get services nginx-ingress-nginx-ingress


/opt/bin/helm/3.8/helm install nginx-ingress nginx-stable/nginx-ingress --set rbac.create=true^C

helm install foo kubernetes-dashboard/kubernetes-dashboard -f values.yaml


/opt/bin/helm/3.8/helm install nginx-ingress nginx-stable/nginx-ingress --set rbac.create=true -f values.yaml


kubectl get pods --all-namespaces -l app=nginx-ingress-nginx-ingress

kubectl get services nginx-ingress-nginx-ingress


curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp



Connectivity testing commands from pod and nodes

From nodes:
curl  -k http://172.17.9.101:8080/v1
curl  -k https://172.17.9.101:6443/v1

From Pods
wget https://10.254.0.1:443
wget https://172.17.9.101:6443


Dns testing command from pods

Cat /etc/resolv.conf

kubectl apply -f https://k8s.io/examples/admin/dns/dnsutils.yaml

nslookup kubernetes.default.svc.cluster.local 10.254.0.20
nslookup kubernetes.default.svc.cluster.local
kubectl exec -ti dnsutils -- nslookup kubernetes.default
kubectl exec -ti hostnames-59cc46cdcf-42dbt -- cat /etc/resolve.conf
kubectl exec -ti dnsutils -- cat /etc/resolve.conf


kubectl run nginx --image=nginx --replicas=1


kubectl run tomcat --image=tomcat:8.0 --replicas=1  -n kube-system 
kubectl run tomcat --image=tomcat:8.0 --replicas=1  -n k8s

apt-get update  
apt-get install dnsutils net-tools telnet

kubectl run nginx --image=nginx --replicas=1
kubectl run live-pod --image=k8s.gcr.io/liveness
kubectl run live-pod --image=nginx

kubectl -n np create deployment nginx --image=nginx
kubectl create deployment nginx --image=nginx
kubectl scale deployment nginx --replicas=1 -n np
kubectl expose deployment nginx --type=NodePort --port 80 --target-port 80 -n np

kubectl expose deployment simple-webapp-deployment --name=webapp-service --port=8080 --target-port=8080 --type=NodePort --selector=name=simple-webapp --overrides '{ "apiVersion": "v1","spec":{"ports":[{"port": 8080,"protocol":"TCP","targetPort": 8080,"nodePort": 30380}]}}'

kubectl create service nodeport webapp-service  --node-port=31000 --tcp=80:80



kubectl exec -ti  tomcat-74fb4fff95-tmqlc -n kube-system /bin/bash
kubectl run tomcat  --rm -it --image=tomcat:8.0 /bin/bash -n np

Cat /etc/resolv.conf

nslookup kubernetes.default.svc.cluster.local 10.254.0.20
nslookup kubernetes.default.svc.cluster.local
nslookup nginx.np.svc.cluster.local
nslookup nginx.default.svc.cluster.local

curl -I http://10.1.121.10

while true; do curl -I http://hpa-nginx/; done



nslookup service-2048.game-2048.svc.cluster.local



kubectl run tom --image=tomcat:8.0
kubectl exec -it tom /bin/bash

apt-get update  
apt-get install dnsutils net-tools telnet



nslookup apple-service.game-2048.svc.cluster.local
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"



alias core="cd /home/controller/Desktop/controller-repo/vagrant-repo/core-test/coreos-vagrant"
alias pp="cd /home/controller/Desktop/controller-repo/git-repo/python-test"
alias repo="cd /home/controller/Desktop/controller-repo"
alias search="cd /home/controller/Desktop/search"
alias vr="cd /home/controller/Desktop/controller-repo/vagrant-repo"
alias k8=" cd /home/controller/Desktop/controller-repo/kube-cluster"

alias kcw="ssh root@192.168.10.92"
alias kcm1="cd /home/controller/Desktop/controller-repo/kube-cluster/cncf/kub-calico/kube-calico-master"
alias kcw1="cd /home/controller/Desktop/controller-repo/kube-cluster/cncf/kub-calico/kube-calico-worker"
alias invl="cd /etc/ansible/inventories/generic/static/local"


cat ansible-execute.sh 
#!/bin/bash
ansible-playbook -i /etc/ansible/inventories/local.yml /etc/ansible/tera.yml

JAVA_HOME=/usr/lib/jvm/java-8-oracle/jre
PATH=$JAVA_HOME/bin:$PATH



export HOME=/opt/apps/go
export PATH=$PATH:/opt/apps/go/bin
export GOROOT=$HOME
export PATH=$PATH:$GOROOT/bin
export GOPATH=$HOME/work

cd /var/cache/apt/archives
mv * back 
cd /var/lib/apt
rm -rf lists


apt-get autoremove
apt-get update
apt-get remove --purge
apt-get clean

Verify the downloaded tarball version by verifying the SHA256 checksum of the downloaded file using the command

go1.18.linux-amd64.tar.gz
wget https://golang.org/dl/go1.16.5.linux-amd64.tar.gz

export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

test docker images 
docker build -t go_app_v1:v1 -f docker_go_app_file_v1 .
docker tag go_app_v1:v1 nik786/go_app_v1:v1
docker push nik786/go_app_v1:v1



docker pull nik786/go_app_v1:v1

docker pull nik786/go_app_v1:v2


docker run -d -p 8080:5680 --name go_v8 nik786/go-v8:v8
docker run -d -p 8090:5680 --name go_v1 nik786/go-v1:go

[git reset process]

git reset HEAD~1
git checkout 3ee20cb3ade26065006d87de206e26ed680e5b73 -- helo3.sh
git commit -m "Jira-9090"
git push

[git revert process]





